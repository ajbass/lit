// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cauchyP
double cauchyP(NumericVector P);
RcppExport SEXP _lit_cauchyP(SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(cauchyP(P));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_prod
arma::mat pairwise_prod(arma::mat x);
RcppExport SEXP _lit_pairwise_prod(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_prod(x));
    return rcpp_result_gen;
END_RCPP
}
// quick_lm_cpp
arma::mat quick_lm_cpp(SEXP Xs, SEXP Ys);
RcppExport SEXP _lit_quick_lm_cpp(SEXP XsSEXP, SEXP YsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Xs(XsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Ys(YsSEXP);
    rcpp_result_gen = Rcpp::wrap(quick_lm_cpp(Xs, Ys));
    return rcpp_result_gen;
END_RCPP
}
// lit_cpp
NumericVector lit_cpp(SEXP Xs, SEXP Ys, SEXP Hs);
RcppExport SEXP _lit_lit_cpp(SEXP XsSEXP, SEXP YsSEXP, SEXP HsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Xs(XsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Hs(HsSEXP);
    rcpp_result_gen = Rcpp::wrap(lit_cpp(Xs, Ys, Hs));
    return rcpp_result_gen;
END_RCPP
}
// marginal_internal
NumericVector marginal_internal(arma::vec Xs, arma::mat Ys, arma::mat Hs);
RcppExport SEXP _lit_marginal_internal(SEXP XsSEXP, SEXP YsSEXP, SEXP HsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Xs(XsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Hs(HsSEXP);
    rcpp_result_gen = Rcpp::wrap(marginal_internal(Xs, Ys, Hs));
    return rcpp_result_gen;
END_RCPP
}
// lit_bed_cpp
List lit_bed_cpp(const char* file, int m_loci, int n_ind, arma::mat sY, arma::mat sH, bool verbose);
RcppExport SEXP _lit_lit_bed_cpp(SEXP fileSEXP, SEXP m_lociSEXP, SEXP n_indSEXP, SEXP sYSEXP, SEXP sHSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type file(fileSEXP);
    Rcpp::traits::input_parameter< int >::type m_loci(m_lociSEXP);
    Rcpp::traits::input_parameter< int >::type n_ind(n_indSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sY(sYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sH(sHSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(lit_bed_cpp(file, m_loci, n_ind, sY, sH, verbose));
    return rcpp_result_gen;
END_RCPP
}
// gamut_bed_cpp
List gamut_bed_cpp(const char* file, int m_loci, int n_ind, arma::mat sY, arma::mat sH, bool verbose);
RcppExport SEXP _lit_gamut_bed_cpp(SEXP fileSEXP, SEXP m_lociSEXP, SEXP n_indSEXP, SEXP sYSEXP, SEXP sHSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type file(fileSEXP);
    Rcpp::traits::input_parameter< int >::type m_loci(m_lociSEXP);
    Rcpp::traits::input_parameter< int >::type n_ind(n_indSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sY(sYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sH(sHSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(gamut_bed_cpp(file, m_loci, n_ind, sY, sH, verbose));
    return rcpp_result_gen;
END_RCPP
}
// marginal_bed_cpp
List marginal_bed_cpp(const char* file, int m_loci, int n_ind, arma::mat sY, arma::mat sH, int tot, bool verbose);
RcppExport SEXP _lit_marginal_bed_cpp(SEXP fileSEXP, SEXP m_lociSEXP, SEXP n_indSEXP, SEXP sYSEXP, SEXP sHSEXP, SEXP totSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type file(fileSEXP);
    Rcpp::traits::input_parameter< int >::type m_loci(m_lociSEXP);
    Rcpp::traits::input_parameter< int >::type n_ind(n_indSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sY(sYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sH(sHSEXP);
    Rcpp::traits::input_parameter< int >::type tot(totSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(marginal_bed_cpp(file, m_loci, n_ind, sY, sH, tot, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lit_cauchyP", (DL_FUNC) &_lit_cauchyP, 1},
    {"_lit_pairwise_prod", (DL_FUNC) &_lit_pairwise_prod, 1},
    {"_lit_quick_lm_cpp", (DL_FUNC) &_lit_quick_lm_cpp, 2},
    {"_lit_lit_cpp", (DL_FUNC) &_lit_lit_cpp, 3},
    {"_lit_marginal_internal", (DL_FUNC) &_lit_marginal_internal, 3},
    {"_lit_lit_bed_cpp", (DL_FUNC) &_lit_lit_bed_cpp, 6},
    {"_lit_gamut_bed_cpp", (DL_FUNC) &_lit_gamut_bed_cpp, 6},
    {"_lit_marginal_bed_cpp", (DL_FUNC) &_lit_marginal_bed_cpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_lit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
